
//**************
// I2C1 
//Pin 18 Data 
//Pin 19 Clock

// 12C2
//Pin 25 Data
//Pin 26 Clock
//*************

//*************
// SSD1306 Address 0x3C
//************

//Resources
//
//Adafruit Python library with byte commands details
//https://github.com/adafruit/Adafruit_Python_SSD1306/blob/master/Adafruit_SSD1306/SSD1306.py
//
//Wilderness Labs byte array to be set to initialize SSD1306
//https://github.com/WildernessLabs/Netduino.Foundation/blob/main/Source/Peripheral_Libs/Displays.SSD1306/Driver/SSD1306.cs

using System;
using System.Device.I2c;
using System.Threading;
using System.Diagnostics;
using nanoFramework.Hardware.Esp32;

namespace NF.SSD1306.i2c
{

	/// <summary>
	///I2c nanoFramework library Adafruit FeatherWing OLED - 128x32 OLED
	/// </summary>
	public class OLED
    {

        private static I2cDevice SSD1306;

		/// <summary>
		///     Supported display types.
		/// </summary>
		public enum DisplayType
		{
			OLED128x64,
			OLED128x32,
			OLED96x16,
		}


		/// <summary>
		///     Sequence of bytes that should be sent to a 128x32 OLED display to setup the device.
		///		First byte is the command byte 0x00.
		/// </summary>
		private readonly byte[] _oled128x32SetupSequence =
		{
			0x00,0xae, 0xd5, 0x80, 0xa8, 0x1f, 0xd3, 0x00, 0x40 | 0x0, 0x8d, 0x14, 0x20, 0x00, 0xa0 | 0x1, 0xc8,
			0xda, 0x02, 0x81, 0x8f, 0xd9, 0x1f, 0xdb, 0x40, 0xa4, 0xa6, 0xaf
		};

		/// <summary>
		///     Sequence of bytes that should be sent to a 128x64 OLED display to setup the device.
		///		First byte is the command byte 0x00.
		///		The sequence should be compatable with the  64x48 OLED  display but has not been tested.
		/// </summary>
		private readonly byte[] _oled128x64SetupSequence =
		{
			0x00, 0xae, 0xd5, 0x80, 0xa8, 0x3f, 0xd3, 0x00, 0x40 | 0x0, 0x8d, 0x14, 0x20, 0x00, 0xa0 | 0x1, 0xc8,
			0xda, 0x12, 0x81, 0xcf, 0xd9, 0xf1, 0xdb, 0x40, 0xa4, 0xa6, 0xaf
		};

		/// <summary>
		///     Sequence of bytes that should be sent to a 96x16 OLED display to setup the device.
		///		First byte is the command byte 0x00.
		///		The 96x16 OLED has not been tested.
		/// </summary>
		private readonly byte[] _oled96x16SetupSequence =
		{
			0x00,0xae, 0xd5, 0x80, 0xa8, 0x1f, 0xd3, 0x00, 0x40 | 0x0, 0x8d, 0x14, 0x20, 0x00, 0xa0 | 0x1, 0xc8,
			0xda, 0x02, 0x81, 0xaf, 0xd9, 0x1f, 0xdb, 0x40, 0xa4, 0xa6, 0xaf
		};
		
		private readonly uint Width;
		private const uint Width128 = 128;
		private const uint Width96 = 96;

		private readonly uint Height;

		private readonly uint BufferSize;        

		public static byte[] DisplayBuffer; 

		/// <summary>
		/// Constructor for I2c bus
		/// Example: OLED oled = new(OLED.DisplayType.OLED128x32, 23, 22);
		/// </summary>
		public OLED(DisplayType displayType,int DataPin = 18,int ClockPin = 19, Boolean ESP32 = true)
		{ 
		
			// I2c pins for Adafruit FeatherWing OLED - 128x32 OLED
			// DataPin = 23, ClockPin = 22
			// ******ESP32 pins cans be changed*******
			if(ESP32)
            {
			    Configuration.SetPinFunction(DataPin, DeviceFunction.I2C1_DATA);

				Configuration.SetPinFunction(ClockPin, DeviceFunction.I2C1_CLOCK);

			}
			
			SSD1306 = I2cDevice.Create(new I2cConnectionSettings(1, 0x3C, I2cBusSpeed.StandardMode));
			
			switch (displayType)
			{
				case DisplayType.OLED128x64:
					Width = 128;
					Height = 64;
					SSD1306.Write(_oled128x64SetupSequence);
					break;

				case DisplayType.OLED128x32:
					Width = 128;
					Height = 32;
					SSD1306.Write(_oled128x32SetupSequence);
					break;

				case DisplayType.OLED96x16:
					Width = 96;
					Height = 16;
					SSD1306.Write(_oled96x16SetupSequence);
					break;

			}

			BufferSize = (Width * Height) / 8;

			DisplayBuffer = new byte[BufferSize];
	
		}
		/// <summary>
		/// Sends command byte 0x00 and command to device
		/// </summary>
		/// <param name="Cmd"></param>		
		private static void Command(byte Cmd)
		{
			SSD1306.Write(new byte[] { 0x00, Cmd });

		}

		/// <summary>
		/// Sends transactions to the display
		/// </summary>
		private void Display()
		{
			byte ColumnAddress = 0x21;
			Command(ColumnAddress);

			byte Reset = 0x0;
			Command(Reset);
			
			if (Width == 96)
			{
				Command((Byte)Width96 - 1);

			}
			else
            {
				Command((Byte)Width128 - 1);

			};		

			byte PageAddress = 0x22;
			Command((Byte)PageAddress);

			Command(Reset);

			byte PageEndAddress = 0x37;
			Command(PageEndAddress);

			byte[] img = new byte[DisplayBuffer.Length + 1];

			byte StartLine = 0x40;
			img[0] = StartLine;
			
			Array.Copy(DisplayBuffer, 0, img, 1, DisplayBuffer.Length - 1);
			
			Thread.Sleep(50);

			// Send the bytes to the device
			SSD1306.Write(img);

		}
		
		/// <summary>
		/// Draws one character to the display
		/// </summary>
		private static void DrawCharacter(int x, int line, char c)
        {
            for (int i = 0; i < 5 ; i++)
            {
                DisplayBuffer[x + ( line * 128)] = Font[(c * 5) + i];

                x++;
            }
        }

        /// <summary>
        ///  Adds the string to the display
        ///  Calls DrawCharacter for each character
        ///  </summary>
        public void Write(int Horizonal, int line, string str, bool Center = true)
        {
			
			//21 characters per line only two lines for wrap
			if (str.Length > 42)
				str = str.Substring(0, 41);
			
			
			if (Center && str.Length < 21)
            {
                str = CenterString(str);
            }

            int x = 0;

            char[] strarray = str.ToCharArray();

            foreach (Char c in strarray)
            {

                DrawCharacter(x, line, c);

                x += 6; // 6 pixels wide

                if (x + 6 >= Width)
                {
                    x = 0;    
                    line++;
                }

                if (line >= Height / 8)
                {
                    return;        
                }
            }

            Display();

        }
		
		/// <summary>
		///     Clears the display
		/// </summary>
		public void ClearScreen()
        {
			Array.Clear(DisplayBuffer, 0, DisplayBuffer.Length);

			Display();
		}
       
        /// <summary>
        ///  Clear one line on the display screen
        /// </summary>
        public void ClearLine(int Horizonal, int Line)
        {
            string Str = "                     ";

            this.Write(Horizonal, Line, Str);

        }

        /// <summary>
        ///  Called from optional Center in Write
        ///</summary> 
        private static string CenterString(string Str)
        {
            try
            {
                int MaxStringLength = 21;

                int spacesNeeded = ((MaxStringLength - Str.Length) / 2);

                string Spaces = string.Empty;

                for (var i = 1; i <= spacesNeeded; i++)

                    Spaces += " ";

                return Spaces + Str;

            }

            catch (Exception)
            {
                Debug.WriteLine("CenterString Error ");
            }

            return Str;
        }

        /// <summary>
        ///  5x7 font
        /// </summary>
        private static readonly byte[] Font = new byte[] 
		{
			0x00, 0x00, 0x00, 0x00, 0x00,
			0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
			0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
			0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
			0x18, 0x3C, 0x7E, 0x3C, 0x18,
			0x1C, 0x57, 0x7D, 0x57, 0x1C,
			0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
			0x00, 0x18, 0x3C, 0x18, 0x00,
			0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
			0x00, 0x18, 0x24, 0x18, 0x00,
			0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
			0x30, 0x48, 0x3A, 0x06, 0x0E,
			0x26, 0x29, 0x79, 0x29, 0x26,
			0x40, 0x7F, 0x05, 0x05, 0x07,
			0x40, 0x7F, 0x05, 0x25, 0x3F,
			0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
			0x7F, 0x3E, 0x1C, 0x1C, 0x08,
			0x08, 0x1C, 0x1C, 0x3E, 0x7F,
			0x14, 0x22, 0x7F, 0x22, 0x14,
			0x5F, 0x5F, 0x00, 0x5F, 0x5F,
			0x06, 0x09, 0x7F, 0x01, 0x7F,
			0x00, 0x66, 0x89, 0x95, 0x6A,
			0x60, 0x60, 0x60, 0x60, 0x60,
			0x94, 0xA2, 0xFF, 0xA2, 0x94,
			0x08, 0x04, 0x7E, 0x04, 0x08,
			0x10, 0x20, 0x7E, 0x20, 0x10,
			0x08, 0x08, 0x2A, 0x1C, 0x08,
			0x08, 0x1C, 0x2A, 0x08, 0x08,
			0x1E, 0x10, 0x10, 0x10, 0x10,
			0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
			0x30, 0x38, 0x3E, 0x38, 0x30,
			0x06, 0x0E, 0x3E, 0x0E, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x5F, 0x00, 0x00,
			0x00, 0x07, 0x00, 0x07, 0x00,
			0x14, 0x7F, 0x14, 0x7F, 0x14,
			0x24, 0x2A, 0x7F, 0x2A, 0x12,
			0x23, 0x13, 0x08, 0x64, 0x62,
			0x36, 0x49, 0x56, 0x20, 0x50,
			0x00, 0x08, 0x07, 0x03, 0x00,
			0x00, 0x1C, 0x22, 0x41, 0x00,
			0x00, 0x41, 0x22, 0x1C, 0x00,
			0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
			0x08, 0x08, 0x3E, 0x08, 0x08,
			0x00, 0x80, 0x70, 0x30, 0x00,
			0x08, 0x08, 0x08, 0x08, 0x08,
			0x00, 0x00, 0x60, 0x60, 0x00,
			0x20, 0x10, 0x08, 0x04, 0x02,
			0x3E, 0x51, 0x49, 0x45, 0x3E,
			0x00, 0x42, 0x7F, 0x40, 0x00,
			0x72, 0x49, 0x49, 0x49, 0x46,
			0x21, 0x41, 0x49, 0x4D, 0x33,
			0x18, 0x14, 0x12, 0x7F, 0x10,
			0x27, 0x45, 0x45, 0x45, 0x39,
			0x3C, 0x4A, 0x49, 0x49, 0x31,
			0x41, 0x21, 0x11, 0x09, 0x07,
			0x36, 0x49, 0x49, 0x49, 0x36,
			0x46, 0x49, 0x49, 0x29, 0x1E,
			0x00, 0x00, 0x14, 0x00, 0x00,
			0x00, 0x40, 0x34, 0x00, 0x00,
			0x00, 0x08, 0x14, 0x22, 0x41,
			0x14, 0x14, 0x14, 0x14, 0x14,
			0x00, 0x41, 0x22, 0x14, 0x08,
			0x02, 0x01, 0x59, 0x09, 0x06,
			0x3E, 0x41, 0x5D, 0x59, 0x4E,
			0x7C, 0x12, 0x11, 0x12, 0x7C,
			0x7F, 0x49, 0x49, 0x49, 0x36,
			0x3E, 0x41, 0x41, 0x41, 0x22,
			0x7F, 0x41, 0x41, 0x41, 0x3E,
			0x7F, 0x49, 0x49, 0x49, 0x41,
			0x7F, 0x09, 0x09, 0x09, 0x01,
			0x3E, 0x41, 0x41, 0x51, 0x73,
			0x7F, 0x08, 0x08, 0x08, 0x7F,
			0x00, 0x41, 0x7F, 0x41, 0x00,
			0x20, 0x40, 0x41, 0x3F, 0x01,
			0x7F, 0x08, 0x14, 0x22, 0x41,
			0x7F, 0x40, 0x40, 0x40, 0x40,
			0x7F, 0x02, 0x1C, 0x02, 0x7F,
			0x7F, 0x04, 0x08, 0x10, 0x7F,
			0x3E, 0x41, 0x41, 0x41, 0x3E,
			0x7F, 0x09, 0x09, 0x09, 0x06,
			0x3E, 0x41, 0x51, 0x21, 0x5E,
			0x7F, 0x09, 0x19, 0x29, 0x46,
			0x26, 0x49, 0x49, 0x49, 0x32,
			0x03, 0x01, 0x7F, 0x01, 0x03,
			0x3F, 0x40, 0x40, 0x40, 0x3F,
			0x1F, 0x20, 0x40, 0x20, 0x1F,
			0x3F, 0x40, 0x38, 0x40, 0x3F,
			0x63, 0x14, 0x08, 0x14, 0x63,
			0x03, 0x04, 0x78, 0x04, 0x03,
			0x61, 0x59, 0x49, 0x4D, 0x43,
			0x00, 0x7F, 0x41, 0x41, 0x41,
			0x02, 0x04, 0x08, 0x10, 0x20,
			0x00, 0x41, 0x41, 0x41, 0x7F,
			0x04, 0x02, 0x01, 0x02, 0x04,
			0x40, 0x40, 0x40, 0x40, 0x40,
			0x00, 0x03, 0x07, 0x08, 0x00,
			0x20, 0x54, 0x54, 0x78, 0x40,
			0x7F, 0x28, 0x44, 0x44, 0x38,
			0x38, 0x44, 0x44, 0x44, 0x28,
			0x38, 0x44, 0x44, 0x28, 0x7F,
			0x38, 0x54, 0x54, 0x54, 0x18,
			0x00, 0x08, 0x7E, 0x09, 0x02,
			0x18, 0xA4, 0xA4, 0x9C, 0x78,
			0x7F, 0x08, 0x04, 0x04, 0x78,
			0x00, 0x44, 0x7D, 0x40, 0x00,
			0x20, 0x40, 0x40, 0x3D, 0x00,
			0x7F, 0x10, 0x28, 0x44, 0x00,
			0x00, 0x41, 0x7F, 0x40, 0x00,
			0x7C, 0x04, 0x78, 0x04, 0x78,
			0x7C, 0x08, 0x04, 0x04, 0x78,
			0x38, 0x44, 0x44, 0x44, 0x38,
			0xFC, 0x18, 0x24, 0x24, 0x18,
			0x18, 0x24, 0x24, 0x18, 0xFC,
			0x7C, 0x08, 0x04, 0x04, 0x08,
			0x48, 0x54, 0x54, 0x54, 0x24,
			0x04, 0x04, 0x3F, 0x44, 0x24,
			0x3C, 0x40, 0x40, 0x20, 0x7C,
			0x1C, 0x20, 0x40, 0x20, 0x1C,
			0x3C, 0x40, 0x30, 0x40, 0x3C,
			0x44, 0x28, 0x10, 0x28, 0x44,
			0x4C, 0x90, 0x90, 0x90, 0x7C,
			0x44, 0x64, 0x54, 0x4C, 0x44,
			0x00, 0x08, 0x36, 0x41, 0x00,
			0x00, 0x00, 0x77, 0x00, 0x00,
			0x00, 0x41, 0x36, 0x08, 0x00,
			0x02, 0x01, 0x02, 0x04, 0x02,
			0x3C, 0x26, 0x23, 0x26, 0x3C,
			0x1E, 0xA1, 0xA1, 0x61, 0x12,
			0x3A, 0x40, 0x40, 0x20, 0x7A,
			0x38, 0x54, 0x54, 0x55, 0x59,
			0x21, 0x55, 0x55, 0x79, 0x41,
			0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
	        0x21, 0x55, 0x54, 0x78, 0x40,
			0x20, 0x54, 0x55, 0x79, 0x40,
			0x0C, 0x1E, 0x52, 0x72, 0x12,
			0x39, 0x55, 0x55, 0x55, 0x59,
			0x39, 0x54, 0x54, 0x54, 0x59,
			0x39, 0x55, 0x54, 0x54, 0x58,
			0x00, 0x00, 0x45, 0x7C, 0x41,
			0x00, 0x02, 0x45, 0x7D, 0x42,
			0x00, 0x01, 0x45, 0x7C, 0x40,
			0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
	        0xF0, 0x28, 0x25, 0x28, 0xF0,
			0x7C, 0x54, 0x55, 0x45, 0x00,
			0x20, 0x54, 0x54, 0x7C, 0x54,
			0x7C, 0x0A, 0x09, 0x7F, 0x49,
			0x32, 0x49, 0x49, 0x49, 0x32,
			0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
	        0x32, 0x4A, 0x48, 0x48, 0x30,
			0x3A, 0x41, 0x41, 0x21, 0x7A,
			0x3A, 0x42, 0x40, 0x20, 0x78,
			0x00, 0x9D, 0xA0, 0xA0, 0x7D,
			0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
	        0x3D, 0x40, 0x40, 0x40, 0x3D,
			0x3C, 0x24, 0xFF, 0x24, 0x24,
			0x48, 0x7E, 0x49, 0x43, 0x66,
			0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
			0xFF, 0x09, 0x29, 0xF6, 0x20,
			0xC0, 0x88, 0x7E, 0x09, 0x03,
			0x20, 0x54, 0x54, 0x79, 0x41,
			0x00, 0x00, 0x44, 0x7D, 0x41,
			0x30, 0x48, 0x48, 0x4A, 0x32,
			0x38, 0x40, 0x40, 0x22, 0x7A,
			0x00, 0x7A, 0x0A, 0x0A, 0x72,
			0x7D, 0x0D, 0x19, 0x31, 0x7D,
			0x26, 0x29, 0x29, 0x2F, 0x28,
			0x26, 0x29, 0x29, 0x29, 0x26,
			0x30, 0x48, 0x4D, 0x40, 0x20,
			0x38, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x38,
			0x2F, 0x10, 0xC8, 0xAC, 0xBA,
			0x2F, 0x10, 0x28, 0x34, 0xFA,
			0x00, 0x00, 0x7B, 0x00, 0x00,
			0x08, 0x14, 0x2A, 0x14, 0x22,
			0x22, 0x14, 0x2A, 0x14, 0x08,
			0xAA, 0x00, 0x55, 0x00, 0xAA,
			0xAA, 0x55, 0xAA, 0x55, 0xAA,
			0x00, 0x00, 0x00, 0xFF, 0x00,
			0x10, 0x10, 0x10, 0xFF, 0x00,
			0x14, 0x14, 0x14, 0xFF, 0x00,
			0x10, 0x10, 0xFF, 0x00, 0xFF,
			0x10, 0x10, 0xF0, 0x10, 0xF0,
			0x14, 0x14, 0x14, 0xFC, 0x00,
			0x14, 0x14, 0xF7, 0x00, 0xFF,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x14, 0x14, 0xF4, 0x04, 0xFC,
			0x14, 0x14, 0x17, 0x10, 0x1F,
			0x10, 0x10, 0x1F, 0x10, 0x1F,
			0x14, 0x14, 0x14, 0x1F, 0x00,
			0x10, 0x10, 0x10, 0xF0, 0x00,
			0x00, 0x00, 0x00, 0x1F, 0x10,
			0x10, 0x10, 0x10, 0x1F, 0x10,
			0x10, 0x10, 0x10, 0xF0, 0x10,
			0x00, 0x00, 0x00, 0xFF, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0xFF, 0x10,
			0x00, 0x00, 0x00, 0xFF, 0x14,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x00, 0x00, 0x1F, 0x10, 0x17,
			0x00, 0x00, 0xFC, 0x04, 0xF4,
			0x14, 0x14, 0x17, 0x10, 0x17,
			0x14, 0x14, 0xF4, 0x04, 0xF4,
			0x00, 0x00, 0xFF, 0x00, 0xF7,
			0x14, 0x14, 0x14, 0x14, 0x14,
			0x14, 0x14, 0xF7, 0x00, 0xF7,
			0x14, 0x14, 0x14, 0x17, 0x14,
			0x10, 0x10, 0x1F, 0x10, 0x1F,
			0x14, 0x14, 0x14, 0xF4, 0x14,
			0x10, 0x10, 0xF0, 0x10, 0xF0,
			0x00, 0x00, 0x1F, 0x10, 0x1F,
			0x00, 0x00, 0x00, 0x1F, 0x14,
			0x00, 0x00, 0x00, 0xFC, 0x14,
			0x00, 0x00, 0xF0, 0x10, 0xF0,
			0x10, 0x10, 0xFF, 0x10, 0xFF,
			0x14, 0x14, 0x14, 0xFF, 0x14,
			0x10, 0x10, 0x10, 0x1F, 0x00,
			0x00, 0x00, 0x00, 0xF0, 0x10,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
			0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			0x38, 0x44, 0x44, 0x38, 0x44,
			0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
	        0x7E, 0x02, 0x02, 0x06, 0x06,
			0x02, 0x7E, 0x02, 0x7E, 0x02,
			0x63, 0x55, 0x49, 0x41, 0x63,
			0x38, 0x44, 0x44, 0x3C, 0x04,
			0x40, 0x7E, 0x20, 0x1E, 0x20,
			0x06, 0x02, 0x7E, 0x02, 0x02,
			0x99, 0xA5, 0xE7, 0xA5, 0x99,
			0x1C, 0x2A, 0x49, 0x2A, 0x1C,
			0x4C, 0x72, 0x01, 0x72, 0x4C,
			0x30, 0x4A, 0x4D, 0x4D, 0x30,
			0x30, 0x48, 0x78, 0x48, 0x30,
			0xBC, 0x62, 0x5A, 0x46, 0x3D,
			0x3E, 0x49, 0x49, 0x49, 0x00,
			0x7E, 0x01, 0x01, 0x01, 0x7E,
			0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
			0x44, 0x44, 0x5F, 0x44, 0x44,
			0x40, 0x51, 0x4A, 0x44, 0x40,
			0x40, 0x44, 0x4A, 0x51, 0x40,
			0x00, 0x00, 0xFF, 0x01, 0x03,
			0xE0, 0x80, 0xFF, 0x00, 0x00,
			0x08, 0x08, 0x6B, 0x6B, 0x08,
			0x36, 0x12, 0x36, 0x24, 0x36,
			0x06, 0x0F, 0x09, 0x0F, 0x06,
			0x00, 0x00, 0x18, 0x18, 0x00,
			0x00, 0x00, 0x10, 0x10, 0x00,
			0x30, 0x40, 0xFF, 0x01, 0x01,
			0x00, 0x1F, 0x01, 0x01, 0x1E,
			0x00, 0x19, 0x1D, 0x17, 0x12,
			0x00, 0x3C, 0x3C, 0x3C, 0x3C,
			0x00, 0x00, 0x00, 0x00, 0x00
	};

    }
}