
//**************
// I2C1 
//Pin 18 Data 
//Pin 19 Clock

// 12C2
//Pin 25 Data
//Pin 26 Clock
//*************

//*************
// SS1306 Address 0x3C
//************

using System;
using Windows.Devices.I2c;
using System.Threading;

namespace nanoframework.i2c.SS1306
{
    
    class OLED
    {

        private static I2cDevice SS1306;

        private const int BufferSize = 1024;

        private const int Width = 128;

        private const int Height = 64;

        public struct DeviceConnectionSting
        {
            public static string I2C1 = "I2C1";
            public static string I2C2 = "I2C2";

        }

        public static byte[] DisplayBuffer = new byte[1024];

        // SSD1306 Commands
        enum Cmds
            {
            DisplayOff = 0xAE,
            DisplayClockDiv = 0xD5,
            DisplayRatio = 0x80,
            Multiplex = 0xA8,
            DisplayOffSet = 0xD3,
            NoOffSet = 0x0,
            StartLine = 0x40,
            ChargePump = 0x8D,
            VCCState = 0x14,
            MemoryMode = 0x20,
            LowColumn = 0x0,
            SegRemap = 0xA1,
            ComScanDec = 0xC8,
            SetComPins = 0xDA,
            DisableLRRemap = 0x12,
            SetContrast = 0x81,
            NoExternalVcc = 0xCF,
            PreCharge = 0xD9,
            InternalDC = 0xF1,
            ComDetect = 0xD8,
            SetComDetect = 0x40,
            DisplayResume = 0xA4,
            NormalDisplay = 0xA6,
            DeactivateScroll = 0x2E,
            DisplayOn = 0xAF,
            ColumnAddress = 0x21,
            Reset = 0x0,
            PageAddress = 0x22,
            PageEndAddress = 0x37
        }

        // Constructor for i2c bus
        // Example: OLED oled = new OLED(OLED.DeviceConnectionSting.I2C1, 0x3C);
        public OLED(string device, byte DeviceAddress)
        {
            
            SS1306 = I2cDevice.FromId( device, new I2cConnectionSettings(DeviceAddress) { BusSpeed = I2cBusSpeed.StandardMode, SharingMode = I2cSharingMode.Shared });

        }

        /// <summary>
        ///  Set SSD1306 Defaults for I2c
        ///</summary>
        public void Initialize()
        {
                      
            Command((byte)Cmds.DisplayOff);
            Command((byte)Cmds.DisplayClockDiv);
            Command((byte)Cmds.DisplayRatio);
            Command((byte)Cmds.Multiplex);
            Command(Height - 1);
            Command((byte)Cmds.DisplayOffSet);
            Command((byte)Cmds.NoOffSet);
            Command((byte)Cmds.StartLine);
            Command((byte)Cmds.ChargePump);
            Command((byte)Cmds.VCCState);
            Command((byte)Cmds.MemoryMode);
            Command((byte)Cmds.LowColumn);
            Command((byte)Cmds.SegRemap);
            Command((byte)Cmds.ComScanDec);
            Command((byte)Cmds.SetComPins);
            Command((byte)Cmds.DisableLRRemap);
            Command((byte)Cmds.SetContrast);
            Command((byte)Cmds.NoExternalVcc);
            Command((byte)Cmds.PreCharge);
            Command((byte)Cmds.InternalDC);
            Command((byte)Cmds.ComDetect);
            Command((byte)Cmds.SetComDetect);
            Command((byte)Cmds.DisplayResume);
            Command((byte)Cmds.NormalDisplay);
            Command((byte)Cmds.DeactivateScroll);
            Command((byte)Cmds.DisplayOn);
        }

        private static void Command(byte Cmd)
        {

            Thread.Sleep(50);
            
            SS1306.Write(new byte[] { 0x00, Cmd });
        }        

        /// <summary>
        ///     ''' Sends the Write and Clear I2c transactions to the display
        ///     ''' </summary>
        ///     ''' <remarks></remarks>
        private static void Display()

        {
            Command((Byte)Cmds.ColumnAddress);

            Command((Byte)Cmds.Reset);

            Command((Byte)Width - 1);

            Command((Byte)Cmds.PageAddress);

            Command((Byte)Cmds.Reset);

            Command((Byte)Cmds.PageEndAddress);

            byte[] img = new byte[1025];

            img[0] = (Byte)Cmds.StartLine;

            Array.Copy(DisplayBuffer, 0, img, 1, 1024);

           Thread.Sleep(50);

            // Send the bytes to the device
            SS1306.Write(img);

        }

        private static void DrawCharacter(int x, int line, char c)
        {
            for (int i = 0; i < 5; i++)
            {
                DisplayBuffer[x + (line * 128)] = Font[(c * 5) + i];
                x++;
            }
        }

        /// <summary>
        ///     ''' Adds the string to the display
        ///     ''' Calls DrawCharacter for each character
        ///     ''' </summary>
        public void Write(int Horizonal, int line, string str, bool Center = true)
        {
            if (Center)
            {
                str = CenterString(str);
            }

            int x = 0;

            char[] strarray = str.ToCharArray();

            foreach (Char c in strarray)
            {

                DrawCharacter(x, line, c);

                x += 6; // 6 pixels wide

                if (x + 6 >= Width)
                {
                    x = 0;    // ran out of this line
                    line++;
                }

                if (line >= Height / 8)
                {
                    return;        // ran out of space :(
                }
            }

            Display();
            
        }

        /// <summary>
        ///     Clears the display
        /// </summary>
        public  void ClearScreen()

        {
            DisplayBuffer[0] = 0;
            DisplayBuffer[1] = 0;
            DisplayBuffer[2] = 0;
            DisplayBuffer[3] = 0;
            DisplayBuffer[4] = 0;
            DisplayBuffer[5] = 0;
            DisplayBuffer[6] = 0;
            DisplayBuffer[7] = 0;
            DisplayBuffer[8] = 0;
            DisplayBuffer[9] = 0;
            DisplayBuffer[10] = 0;
            DisplayBuffer[11] = 0;
            DisplayBuffer[12] = 0;
            DisplayBuffer[13] = 0;
            DisplayBuffer[14] = 0;
            DisplayBuffer[15] = 0;

            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 16, 16);
            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 32, 32);
            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 64, 64);
            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 128, 128);
            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 256, 256);
            Array.Copy(DisplayBuffer, 0, DisplayBuffer, 512, 512);

            Display();
        }
       
        /// <summary>
        ///  Clear one line on the device screen
        /// </summary>
        public void ClearLine(int Horizonal, int Line)
        {

            // 21 spaces
            // font is 6 pixels wide sceen is 128 pixel
            string Str = "                     ";

           this.Write(Horizonal, Line, Str);

        }

        /// <summary>
        ///  Called from optional Center in Write
        ///</summary> 
        private static string CenterString(string Str)
        {
            try
            {
                

                int MaxStringLength = 21;

                int spacesNeeded = ((MaxStringLength - Str.Length) / 2);

                string Spaces = string.Empty;

                 for (var i = 1; i <= spacesNeeded; i++)

                    Spaces += " ";

                 return Spaces + Str;
               
            }

            catch (Exception)
            {
                Console.WriteLine("CenterString Error ");
            }

            return Str;
        }


        ///     <summary>
        ///       5x7 font
        ///     </summary>
        private static readonly byte[] Font = new byte[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x3E,
             0x5B, 0x4F, 0x5B, 0x3E, 0x3E, 0x6B,
             0x4F, 0x6B, 0x3E, 0x1C, 0x3E, 0x7C,
             0x3E, 0x1C, 0x18, 0x3C, 0x7E, 0x3C,
             0x18, 0x1C, 0x57, 0x7D, 0x57, 0x1C,
             0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 0x0,
             0x18, 0x3C, 0x18, 0x0, 0xFF, 0xE7,
             0xC3, 0xE7, 0xFF, 0x0, 0x18, 0x24,
             0x18, 0x0, 0xFF, 0xE7, 0xDB, 0xE7,
             0xFF, 0x30, 0x48, 0x3A, 0x6, 0xE,
             0x26, 0x29, 0x79, 0x29, 0x26, 0x40,
             0x7F, 0x5, 0x5, 0x7, 0x40, 0x7F,
             0x5, 0x25, 0x3F, 0x5A, 0x3C, 0xE7,
             0x3C, 0x5A, 0x7F, 0x3E, 0x1C, 0x1C,
             0x8, 0x8, 0x1C, 0x1C, 0x3E, 0x7F,
             0x14, 0x22, 0x7F, 0x22, 0x14, 0x5F,
             0x5F, 0x0, 0x5F, 0x5F, 0x6, 0x9,
             0x7F, 0x1, 0x7F, 0x0, 0x66, 0x89,
             0x95, 0x6A, 0x60, 0x60, 0x60, 0x60,
             0x60, 0x94, 0xA2, 0xFF, 0xA2, 0x94,
             0x8, 0x4, 0x7E, 0x4, 0x8, 0x10,
             0x20, 0x7E, 0x20, 0x10, 0x8, 0x8,
             0x2A, 0x1C, 0x8, 0x8, 0x1C, 0x2A,
             0x8, 0x8, 0x1E, 0x10, 0x10, 0x10,
             0x10, 0xC, 0x1E, 0xC, 0x1E, 0xC,
             0x30, 0x38, 0x3E, 0x38, 0x30, 0x6,
             0xE, 0x3E, 0xE, 0x6, 0x0, 0x0,
             0x0, 0x0, 0x0, 0x0, 0x0, 0x5F,
             0x0, 0x0, 0x0, 0x7, 0x0, 0x7,
             0x0, 0x14, 0x7F, 0x14, 0x7F, 0x14,
             0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x23,
             0x13, 0x8, 0x64, 0x62, 0x36, 0x49,
             0x56, 0x20, 0x50, 0x0, 0x8, 0x7,
             0x3, 0x0, 0x0, 0x1C, 0x22, 0x41,
             0x0, 0x0, 0x41, 0x22, 0x1C, 0x0,
             0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x8,
             0x8, 0x3E, 0x8, 0x8, 0x0, 0x80,
             0x70, 0x30, 0x0, 0x8, 0x8, 0x8,
             0x8, 0x8, 0x0, 0x0, 0x60, 0x60,
             0x0, 0x20, 0x10, 0x8, 0x4, 0x2,
             0x3E, 0x51, 0x49, 0x45, 0x3E, 0x0,
             0x42, 0x7F, 0x40, 0x0, 0x72, 0x49,
             0x49, 0x49, 0x46, 0x21, 0x41, 0x49,
             0x4D, 0x33, 0x18, 0x14, 0x12, 0x7F,
             0x10, 0x27, 0x45, 0x45, 0x45, 0x39,
             0x3C, 0x4A, 0x49, 0x49, 0x31, 0x41,
             0x21, 0x11, 0x9, 0x7, 0x36, 0x49,
             0x49, 0x49, 0x36, 0x46, 0x49, 0x49,
             0x29, 0x1E, 0x0, 0x0, 0x14, 0x0,
             0x0, 0x0, 0x40, 0x34, 0x0, 0x0,
             0x0, 0x8, 0x14, 0x22, 0x41, 0x14,
             0x14, 0x14, 0x14, 0x14, 0x0, 0x41,
             0x22, 0x14, 0x8, 0x2, 0x1, 0x59,
             0x9, 0x6, 0x3E, 0x41, 0x5D, 0x59,
             0x4E, 0x7C, 0x12, 0x11, 0x12, 0x7C,
             0x7F, 0x49, 0x49, 0x49, 0x36, 0x3E,
             0x41, 0x41, 0x41, 0x22, 0x7F, 0x41,
             0x41, 0x41, 0x3E, 0x7F, 0x49, 0x49,
             0x49, 0x41, 0x7F, 0x9, 0x9, 0x9,
             0x1, 0x3E, 0x41, 0x41, 0x51, 0x73,
             0x7F, 0x8, 0x8, 0x8, 0x7F, 0x0,
             0x41, 0x7F, 0x41, 0x0, 0x20, 0x40,
             0x41, 0x3F, 0x1, 0x7F, 0x8, 0x14,
             0x22, 0x41, 0x7F, 0x40, 0x40, 0x40,
             0x40, 0x7F, 0x2, 0x1C, 0x2, 0x7F,
             0x7F, 0x4, 0x8, 0x10, 0x7F, 0x3E,
             0x41, 0x41, 0x41, 0x3E, 0x7F, 0x9,
             0x9, 0x9, 0x6, 0x3E, 0x41, 0x51,
             0x21, 0x5E, 0x7F, 0x9, 0x19, 0x29,
             0x46, 0x26, 0x49, 0x49, 0x49, 0x32,
             0x3, 0x1, 0x7F, 0x1, 0x3, 0x3F,
             0x40, 0x40, 0x40, 0x3F, 0x1F, 0x20,
             0x40, 0x20, 0x1F, 0x3F, 0x40, 0x38,
             0x40, 0x3F, 0x63, 0x14, 0x8, 0x14,
             0x63, 0x3, 0x4, 0x78, 0x4, 0x3,
             0x61, 0x59, 0x49, 0x4D, 0x43, 0x0,
             0x7F, 0x41, 0x41, 0x41, 0x2, 0x4,
             0x8, 0x10, 0x20, 0x0, 0x41, 0x41,
             0x41, 0x7F, 0x4, 0x2, 0x1, 0x2,
             0x4, 0x40, 0x40, 0x40, 0x40, 0x40,
             0x0, 0x3, 0x7, 0x8, 0x0, 0x20,
             0x54, 0x54, 0x78, 0x40, 0x7F, 0x28,
             0x44, 0x44, 0x38, 0x38, 0x44, 0x44,
             0x44, 0x28, 0x38, 0x44, 0x44, 0x28,
             0x7F, 0x38, 0x54, 0x54, 0x54, 0x18,
             0x0, 0x8, 0x7E, 0x9, 0x2, 0x18,
             0xA4, 0xA4, 0x9C, 0x78, 0x7F, 0x8,
             0x4, 0x4, 0x78, 0x0, 0x44, 0x7D,
             0x40, 0x0, 0x20, 0x40, 0x40, 0x3D,
             0x0, 0x7F, 0x10, 0x28, 0x44, 0x0,
             0x0, 0x41, 0x7F, 0x40, 0x0, 0x7C,
             0x4, 0x78, 0x4, 0x78, 0x7C, 0x8,
             0x4, 0x4, 0x78, 0x38, 0x44, 0x44,
             0x44, 0x38, 0xFC, 0x18, 0x24, 0x24,
             0x18, 0x18, 0x24, 0x24, 0x18, 0xFC,
             0x7C, 0x8, 0x4, 0x4, 0x8, 0x48,
             0x54, 0x54, 0x54, 0x24, 0x4, 0x4,
             0x3F, 0x44, 0x24, 0x3C, 0x40, 0x40,
             0x20, 0x7C, 0x1C, 0x20, 0x40, 0x20,
             0x1C, 0x3C, 0x40, 0x30, 0x40, 0x3C,
             0x44, 0x28, 0x10, 0x28, 0x44, 0x4C,
             0x90, 0x90, 0x90, 0x7C, 0x44, 0x64,
             0x54, 0x4C, 0x44, 0x0, 0x8, 0x36,
             0x41, 0x0, 0x0, 0x0, 0x77, 0x0,
             0x0, 0x0, 0x41, 0x36, 0x8, 0x0,
             0x2, 0x1, 0x2, 0x4, 0x2, 0x3C,
             0x26, 0x23, 0x26, 0x3C, 0x1E, 0xA1,
             0xA1, 0x61, 0x12, 0x3A, 0x40, 0x40,
             0x20, 0x7A, 0x38, 0x54, 0x54, 0x55,
             0x59, 0x21, 0x55, 0x55, 0x79, 0x41,
             0x21, 0x54, 0x54, 0x78, 0x41, 0x21,
             0x55, 0x54, 0x78, 0x40, 0x20, 0x54,
             0x55, 0x79, 0x40, 0xC, 0x1E, 0x52,
             0x72, 0x12, 0x39, 0x55, 0x55, 0x55,
             0x59, 0x39, 0x54, 0x54, 0x54, 0x59,
             0x39, 0x55, 0x54, 0x54, 0x58, 0x0,
             0x0, 0x45, 0x7C, 0x41, 0x0, 0x2,
             0x45, 0x7D, 0x42, 0x0, 0x1, 0x45,
             0x7C, 0x40, 0xF0, 0x29, 0x24, 0x29,
             0xF0, 0xF0, 0x28, 0x25, 0x28, 0xF0,
             0x7C, 0x54, 0x55, 0x45, 0x0, 0x20,
             0x54, 0x54, 0x7C, 0x54, 0x7C, 0xA,
             0x9, 0x7F, 0x49, 0x32, 0x49, 0x49,
             0x49, 0x32, 0x32, 0x48, 0x48, 0x48,
             0x32, 0x32, 0x4A, 0x48, 0x48, 0x30,
             0x3A, 0x41, 0x41, 0x21, 0x7A, 0x3A,
             0x42, 0x40, 0x20, 0x78, 0x0, 0x9D,
             0xA0, 0xA0, 0x7D, 0x39, 0x44, 0x44,
             0x44, 0x39, 0x3D, 0x40, 0x40, 0x40,
             0x3D, 0x3C, 0x24, 0xFF, 0x24, 0x24,
             0x48, 0x7E, 0x49, 0x43, 0x66, 0x2B,
             0x2F, 0xFC, 0x2F, 0x2B, 0xFF, 0x9,
             0x29, 0xF6, 0x20, 0xC0, 0x88, 0x7E,
             0x9, 0x3, 0x20, 0x54, 0x54, 0x79,
             0x41, 0x0, 0x0, 0x44, 0x7D, 0x41,
             0x30, 0x48, 0x48, 0x4A, 0x32, 0x38,
             0x40, 0x40, 0x22, 0x7A, 0x0, 0x7A,
             0xA, 0xA, 0x72, 0x7D, 0xD, 0x19,
             0x31, 0x7D, 0x26, 0x29, 0x29, 0x2F,
             0x28, 0x26, 0x29, 0x29, 0x29, 0x26,
             0x30, 0x48, 0x4D, 0x40, 0x20, 0x38,
             0x8, 0x8, 0x8, 0x8, 0x8, 0x8,
             0x8, 0x8, 0x38, 0x2F, 0x10, 0xC8,
             0xAC, 0xBA, 0x2F, 0x10, 0x28, 0x34,
             0xFA, 0x0, 0x0, 0x7B, 0x0, 0x0,
             0x8, 0x14, 0x2A, 0x14, 0x22, 0x22,
             0x14, 0x2A, 0x14, 0x8, 0xAA, 0x0,
             0x55, 0x0, 0xAA, 0xAA, 0x55, 0xAA,
             0x55, 0xAA, 0x0, 0x0, 0x0, 0xFF,
             0x0, 0x10, 0x10, 0x10, 0xFF, 0x0,
             0x14, 0x14, 0x14, 0xFF, 0x0, 0x10,
             0x10, 0xFF, 0x0, 0xFF, 0x10, 0x10,
             0xF0, 0x10, 0xF0, 0x14, 0x14, 0x14,
             0xFC, 0x0, 0x14, 0x14, 0xF7, 0x0,
             0xFF, 0x0, 0x0, 0xFF, 0x0, 0xFF,
             0x14, 0x14, 0xF4, 0x4, 0xFC, 0x14,
             0x14, 0x17, 0x10, 0x1F, 0x10, 0x10,
             0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14,
             0x1F, 0x0, 0x10, 0x10, 0x10, 0xF0,
             0x0, 0x0, 0x0, 0x0, 0x1F, 0x10,
             0x10, 0x10, 0x10, 0x1F, 0x10, 0x10,
             0x10, 0x10, 0xF0, 0x10, 0x0, 0x0,
             0x0, 0xFF, 0x10, 0x10, 0x10, 0x10,
             0x10, 0x10, 0x10, 0x10, 0x10, 0xFF,
             0x10, 0x0, 0x0, 0x0, 0xFF, 0x14,
             0x0, 0x0, 0xFF, 0x0, 0xFF, 0x0,
             0x0, 0x1F, 0x10, 0x17, 0x0, 0x0,
             0xFC, 0x4, 0xF4, 0x14, 0x14, 0x17,
             0x10, 0x17, 0x14, 0x14, 0xF4, 0x4,
             0xF4, 0x0, 0x0, 0xFF, 0x0, 0xF7,
             0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
             0x14, 0xF7, 0x0, 0xF7, 0x14, 0x14,
             0x14, 0x17, 0x14, 0x10, 0x10, 0x1F,
             0x10, 0x1F, 0x14, 0x14, 0x14, 0xF4,
             0x14, 0x10, 0x10, 0xF0, 0x10, 0xF0,
             0x0, 0x0, 0x1F, 0x10, 0x1F, 0x0,
             0x0, 0x0, 0x1F, 0x14, 0x0, 0x0,
             0x0, 0xFC, 0x14, 0x0, 0x0, 0xF0,
             0x10, 0xF0, 0x10, 0x10, 0xFF, 0x10,
             0xFF, 0x14, 0x14, 0x14, 0xFF, 0x14,
             0x10, 0x10, 0x10, 0x1F, 0x0, 0x0,
             0x0, 0x0, 0xF0, 0x10, 0xFF, 0xFF,
             0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0,
             0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0x0,
             0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF,
             0xF, 0xF, 0xF, 0xF, 0xF, 0x38,
             0x44, 0x44, 0x38, 0x44, 0x7C, 0x2A,
             0x2A, 0x3E, 0x14, 0x7E, 0x2, 0x2,
             0x6, 0x6, 0x2, 0x7E, 0x2, 0x7E,
             0x2, 0x63, 0x55, 0x49, 0x41, 0x63,
             0x38, 0x44, 0x44, 0x3C, 0x4, 0x40,
             0x7E, 0x20, 0x1E, 0x20, 0x6, 0x2,
             0x7E, 0x2, 0x2, 0x99, 0xA5, 0xE7,
             0xA5, 0x99, 0x1C, 0x2A, 0x49, 0x2A,
             0x1C, 0x4C, 0x72, 0x1, 0x72, 0x4C,
             0x30, 0x4A, 0x4D, 0x4D, 0x30, 0x30,
             0x48, 0x78, 0x48, 0x30, 0xBC, 0x62,
             0x5A, 0x46, 0x3D, 0x3E, 0x49, 0x49,
             0x49, 0x0, 0x7E, 0x1, 0x1, 0x1,
             0x7E, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
             0x44, 0x44, 0x5F, 0x44, 0x44, 0x40,
             0x51, 0x4A, 0x44, 0x40, 0x40, 0x44,
             0x4A, 0x51, 0x40, 0x0, 0x0, 0xFF,
             0x1, 0x3, 0xE0, 0x80, 0xFF, 0x0,
             0x0, 0x8, 0x8, 0x6B, 0x6B, 0x8,
             0x36, 0x12, 0x36, 0x24, 0x36, 0x6,
             0xF, 0x9, 0xF, 0x6, 0x0, 0x0,
             0x18, 0x18, 0x0, 0x0, 0x0, 0x10,
             0x10, 0x0, 0x30, 0x40, 0xFF, 0x1,
             0x1, 0x0, 0x1F, 0x1, 0x1, 0x1E,
             0x0, 0x19, 0x1D, 0x17, 0x12, 0x0,
             0x3C, 0x3C, 0x3C, 0x3C, 0x0, 0x0,
             0x0, 0x0, 0x0};

    }

}